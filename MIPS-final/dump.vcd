$date
	Wed Jul 12 19:27:32 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module MIPS_tb $end
$var wire 32 ! writedata [31:0] $end
$var wire 1 " MemWrite $end
$var wire 32 # ALUout [31:0] $end
$var reg 1 $ clk $end
$var reg 1 % reset $end
$scope module dut $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 32 & writedata [31:0] $end
$var wire 32 ' pc [31:0] $end
$var wire 32 ( instr [31:0] $end
$var wire 32 ) ReadData [31:0] $end
$var wire 1 " MemWrite $end
$var wire 32 * ALUout [31:0] $end
$scope module U17 $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 1 + zero $end
$var wire 32 , writedata [31:0] $end
$var wire 32 - pc [31:0] $end
$var wire 32 . instr [31:0] $end
$var wire 1 / RegWrite $end
$var wire 1 0 RegDst $end
$var wire 32 1 ReadData [31:0] $end
$var wire 1 2 PCSrc $end
$var wire 1 " MemWrite $end
$var wire 1 3 MemToReg $end
$var wire 1 4 Jump $end
$var wire 3 5 AluControl [2:0] $end
$var wire 32 6 ALUout [31:0] $end
$var wire 1 7 ALUSrc $end
$scope module U15 $end
$var wire 1 2 PCSrc $end
$var wire 6 8 funct [5:0] $end
$var wire 6 9 opcode [5:0] $end
$var wire 1 + zero $end
$var wire 1 / RegWrite $end
$var wire 1 0 RegDst $end
$var wire 1 " MemWrite $end
$var wire 1 3 MemToReg $end
$var wire 1 4 Jump $end
$var wire 1 : Branch $end
$var wire 3 ; AluControl [2:0] $end
$var wire 1 7 ALUSrc $end
$var wire 2 < ALUOp [1:0] $end
$scope module U1 $end
$var wire 6 = opcode [5:0] $end
$var reg 2 > ALUOp [1:0] $end
$var reg 1 7 ALUSrc $end
$var reg 1 : Branch $end
$var reg 1 4 Jump $end
$var reg 1 3 MemToReg $end
$var reg 1 " MemWrite $end
$var reg 1 0 RegDst $end
$var reg 1 / RegWrite $end
$upscope $end
$scope module U2 $end
$var wire 2 ? ALUOp [1:0] $end
$var wire 6 @ funct [5:0] $end
$var reg 3 A AluControl [2:0] $end
$upscope $end
$upscope $end
$scope module U16 $end
$var wire 1 7 ALUSrc $end
$var wire 3 B AluControl [2:0] $end
$var wire 1 4 Jump $end
$var wire 1 3 MemToReg $end
$var wire 1 2 PCSrc $end
$var wire 1 0 RegDst $end
$var wire 1 / RegWrite $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 1 + zero $end
$var wire 5 C writereg [4:0] $end
$var wire 32 D writedata [31:0] $end
$var wire 32 E srcb [31:0] $end
$var wire 32 F srca [31:0] $end
$var wire 32 G signimmsh [31:0] $end
$var wire 32 H signimm [31:0] $end
$var wire 32 I result [31:0] $end
$var wire 32 J pcplus4 [31:0] $end
$var wire 32 K pcnextbr [31:0] $end
$var wire 32 L pcnext [31:0] $end
$var wire 32 M pcbranch [31:0] $end
$var wire 32 N pc [31:0] $end
$var wire 32 O instr [31:0] $end
$var wire 32 P ReadData [31:0] $end
$var wire 32 Q ALUout [31:0] $end
$scope module U10 $end
$var wire 5 R in0 [4:0] $end
$var wire 5 S in1 [4:0] $end
$var wire 1 0 sel $end
$var wire 5 T out [4:0] $end
$upscope $end
$scope module U11 $end
$var wire 1 3 sel $end
$var wire 32 U out [31:0] $end
$var wire 32 V in1 [31:0] $end
$var wire 32 W in0 [31:0] $end
$upscope $end
$scope module U12 $end
$var wire 16 X a [15:0] $end
$var wire 32 Y y [31:0] $end
$upscope $end
$scope module U13 $end
$var wire 32 Z in1 [31:0] $end
$var wire 1 7 sel $end
$var wire 32 [ out [31:0] $end
$var wire 32 \ in0 [31:0] $end
$upscope $end
$scope module U14 $end
$var wire 3 ] alu_control [2:0] $end
$var wire 32 ^ b [31:0] $end
$var wire 1 + zero $end
$var wire 32 _ a [31:0] $end
$var reg 32 ` result [31:0] $end
$upscope $end
$scope module U3 $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 32 a NextAddr [31:0] $end
$var reg 32 b Addr [31:0] $end
$upscope $end
$scope module U4 $end
$var wire 32 c a [31:0] $end
$var wire 32 d b [31:0] $end
$var wire 32 e y [31:0] $end
$upscope $end
$scope module U5 $end
$var wire 32 f a [31:0] $end
$var wire 32 g y [31:0] $end
$upscope $end
$scope module U6 $end
$var wire 32 h a [31:0] $end
$var wire 32 i b [31:0] $end
$var wire 32 j y [31:0] $end
$upscope $end
$scope module U7 $end
$var wire 32 k in0 [31:0] $end
$var wire 32 l in1 [31:0] $end
$var wire 1 2 sel $end
$var wire 32 m out [31:0] $end
$upscope $end
$scope module U8 $end
$var wire 32 n in0 [31:0] $end
$var wire 32 o in1 [31:0] $end
$var wire 1 4 sel $end
$var wire 32 p out [31:0] $end
$upscope $end
$scope module U9 $end
$var wire 32 q ReadData1 [31:0] $end
$var wire 32 r ReadData2 [31:0] $end
$var wire 5 s ReadRegister1 [4:0] $end
$var wire 5 t ReadRegister2 [4:0] $end
$var wire 1 / RegWrite $end
$var wire 32 u WriteData [31:0] $end
$var wire 5 v WriteRegister [4:0] $end
$var wire 1 $ clk $end
$var reg 32 w t0 [31:0] $end
$var reg 32 x t1 [31:0] $end
$var reg 32 y t2 [31:0] $end
$var reg 32 z t3 [31:0] $end
$var reg 32 { t5 [31:0] $end
$var integer 32 | i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module U18 $end
$var wire 6 } address [5:0] $end
$var wire 32 ~ instr [31:0] $end
$upscope $end
$scope module U19 $end
$var wire 32 !" Address [31:0] $end
$var wire 1 " MemWrite $end
$var wire 32 "" ReadData [31:0] $end
$var wire 32 #" WriteData [31:0] $end
$var wire 1 $ clk $end
$var reg 32 $" word2 [31:0] $end
$var integer 32 %" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1000000 %"
b0 $"
b0 #"
b0 ""
b100 !"
b100000000010000000000000000100 ~
b0 }
b100000 |
b0 {
b0 z
b0 y
b0 x
b0 w
b1000 v
b100 u
b1000 t
b0 s
b0 r
b0 q
b100 p
b1000000000000000010000 o
b100 n
b100 m
b10100 l
b100 k
b10100 j
b10000 i
b100 h
b10000 g
b100 f
b100 e
b100 d
b0 c
b0 b
b100 a
b100 `
b0 _
b100 ^
b10 ]
b0 \
b100 [
b100 Z
b100 Y
b100 X
b100 W
b0 V
b100 U
b1000 T
b0 S
b1000 R
b100 Q
b0 P
b100000000010000000000000000100 O
b0 N
b10100 M
b100 L
b100 K
b100 J
b100 I
b100 H
b10000 G
b0 F
b100 E
b0 D
b1000 C
b10 B
b10 A
b100 @
b0 ?
b0 >
b1000 =
b0 <
b10 ;
0:
b1000 9
b100 8
17
b100 6
b10 5
04
03
02
b0 1
00
1/
b100000000010000000000000000100 .
b0 -
b0 ,
0+
b100 *
b0 )
b100000000010000000000000000100 (
b0 '
b0 &
1%
0$
b100 #
0"
b0 !
$end
#5
b100 w
b100 !
b100 &
b100 ,
b100 D
b100 \
b100 r
b100 #"
1$
#10
0$
0%
#15
b10 I
b10 U
b10 u
b10 #
b10 *
b10 6
b10 Q
b10 W
b10 `
b10 !"
b10 E
b10 [
b10 ^
b1000 G
b1000 g
b1000 i
b1001 C
b1001 T
b1001 v
b1000 L
b1000 a
b1000 p
b10 H
b10 Y
b10 Z
b10 f
b10 X
b1001 R
b0 !
b0 &
b0 ,
b0 D
b0 \
b0 r
b0 #"
b1001 t
b1001000000000000001000 o
b10 8
b10 @
b1000 K
b1000 m
b1000 n
b100000000010010000000000000010 (
b100000000010010000000000000010 .
b100000000010010000000000000010 O
b100000000010010000000000000010 ~
b1 }
b10000 M
b10000 j
b10000 l
b1000 J
b1000 e
b1000 h
b1000 k
b100 '
b100 -
b100 N
b100 b
b100 c
1$
#20
0$
#25
b110 I
b110 U
b110 u
b1010 C
b1010 T
b1010 v
b10100000010000000 G
b10100000010000000 g
b10100000010000000 i
b110 #
b110 *
b110 6
b110 Q
b110 W
b110 `
b110 !"
07
b10 <
b10 >
b10 ?
10
b1100 L
b1100 a
b1100 p
b101000000100000 H
b101000000100000 Y
b101000000100000 Z
b101000000100000 f
b101000000100000 X
b1010 S
b100 F
b100 _
b100 q
b1000 s
b100001001010100000010000000 o
b100000 8
b100000 @
b0 9
b0 =
b1100 K
b1100 m
b1100 n
b1000010010101000000100000 (
b1000010010101000000100000 .
b1000010010101000000100000 O
b1000010010101000000100000 ~
b10 }
b10 x
b10100000010001100 M
b10100000010001100 j
b10100000010001100 l
b1100 J
b1100 e
b1100 h
b1100 k
b1000 '
b1000 -
b1000 N
b1000 b
b1000 c
b10 !
b10 &
b10 ,
b10 D
b10 \
b10 r
b10 #"
1$
#30
0$
#35
b11 5
b11 ;
b11 A
b11 B
b11 ]
b10110000010011000 G
b10110000010011000 g
b10110000010011000 i
b1011 C
b1011 T
b1011 v
b10000 L
b10000 a
b10000 p
b101100000100110 H
b101100000100110 Y
b101100000100110 Z
b101100000100110 f
b101100000100110 X
b1011 S
b100001001010110000010011000 o
b100110 8
b100110 @
b10000 K
b10000 m
b10000 n
b1000010010101100000100110 (
b1000010010101100000100110 .
b1000010010101100000100110 O
b1000010010101100000100110 ~
b11 }
b110 y
b10110000010101000 M
b10110000010101000 j
b10110000010101000 l
b10000 J
b10000 e
b10000 h
b10000 k
b1100 '
b1100 -
b1100 N
b1100 b
b1100 c
1$
#40
0$
#45
b110 5
b110 ;
b110 A
b110 B
b110 ]
12
1+
b0 I
b0 U
b0 u
b100 G
b100 g
b100 i
b110 E
b110 [
b110 ^
b0 #
b0 *
b0 6
b0 Q
b0 W
b0 `
b0 !"
0/
b1 <
b1 >
b1 ?
1:
00
b11000 L
b11000 a
b11000 p
b1 H
b1 Y
b1 Z
b1 f
b1 X
b0 S
b1011 R
b110 !
b110 &
b110 ,
b110 D
b110 \
b110 r
b110 #"
b1011 t
b110 F
b110 _
b110 q
b1010 s
b101001011000000000000000100 o
b1 8
b1 @
b100 9
b100 =
b11000 K
b11000 m
b11000 n
b10001010010110000000000000001 (
b10001010010110000000000000001 .
b10001010010110000000000000001 O
b10001010010110000000000000001 ~
b100 }
b110 z
b11000 M
b11000 j
b11000 l
b10100 J
b10100 e
b10100 h
b10100 k
b10000 '
b10000 -
b10000 N
b10000 b
b10000 c
1$
#50
0$
#55
b10 5
b10 ;
b10 A
b10 B
b10 ]
0+
b0 )
b0 1
b0 P
b0 V
b0 ""
b1000 I
b1000 U
b1000 u
02
b100000 G
b100000 g
b100000 i
b1000 C
b1000 T
b1000 v
b1000 E
b1000 [
b1000 ^
b1000 #
b1000 *
b1000 6
b1000 Q
b1000 W
b1000 `
b1000 !"
17
1"
b0 <
b0 >
b0 ?
0:
b11100 L
b11100 a
b11100 p
b1000 H
b1000 Y
b1000 Z
b1000 f
b1000 X
b1000 R
b100 !
b100 &
b100 ,
b100 D
b100 \
b100 r
b100 #"
b1000 t
b0 F
b0 _
b0 q
b0 s
b1000000000000000100000 o
b1000 8
b1000 @
b101011 9
b101011 =
b11100 K
b11100 m
b11100 n
b10101100000010000000000000001000 (
b10101100000010000000000000001000 .
b10101100000010000000000000001000 O
b10101100000010000000000000001000 ~
b110 }
b111100 M
b111100 j
b111100 l
b11100 J
b11100 e
b11100 h
b11100 k
b11000 '
b11000 -
b11000 N
b11000 b
b11000 c
1$
#60
0$
#65
1+
b0 I
b0 U
b0 u
b0 #
b0 *
b0 6
b0 Q
b0 W
b0 `
b0 !"
b0 E
b0 [
b0 ^
b100100 G
b100100 g
b100100 i
b0 C
b0 T
b0 v
07
0"
14
b100100 L
b100100 a
b100100 p
b1001 H
b1001 Y
b1001 Z
b1001 f
b1001 X
b0 R
b0 !
b0 &
b0 ,
b0 D
b0 \
b0 r
b0 #"
b0 t
b100100 o
b1001 8
b1001 @
b10 9
b10 =
b100000 K
b100000 m
b100000 n
b1000000000000000000000001001 (
b1000000000000000000000001001 .
b1000000000000000000000001001 O
b1000000000000000000000001001 ~
b111 }
b100 $"
b1000100 M
b1000100 j
b1000100 l
b100000 J
b100000 e
b100000 h
b100000 k
b11100 '
b11100 -
b11100 N
b11100 b
b11100 c
b0 )
b0 1
b0 P
b0 V
b0 ""
1$
#70
0$
#75
b100 I
b100 U
b100 u
0+
b100 )
b100 1
b100 P
b100 V
b100 ""
b1000 #
b1000 *
b1000 6
b1000 Q
b1000 W
b1000 `
b1000 !"
b1000 E
b1000 [
b1000 ^
b100000 G
b100000 g
b100000 i
b1101 C
b1101 T
b1101 v
b101000 L
b101000 a
b101000 p
1/
17
13
04
b1000 H
b1000 Y
b1000 Z
b1000 f
b1000 X
b1101 R
b1101 t
b1101000000000000100000 o
b1000 8
b1000 @
b100011 9
b100011 =
b101000 K
b101000 m
b101000 n
b10001100000011010000000000001000 (
b10001100000011010000000000001000 .
b10001100000011010000000000001000 O
b10001100000011010000000000001000 ~
b1001 }
b1001000 M
b1001000 j
b1001000 l
b101000 J
b101000 e
b101000 h
b101000 k
b100100 '
b100100 -
b100100 N
b100100 b
b100100 c
1$
#80
0$
#85
x+
bx )
bx 1
bx P
bx V
bx ""
bx I
bx U
bx u
bx E
bx [
bx ^
bx00 G
bx00 g
bx00 i
bx C
bx T
bx v
bx #
bx *
bx 6
bx Q
bx W
bx `
bx !"
07
b10 <
b10 >
b10 ?
03
10
b101100 L
b101100 a
b101100 p
bx H
bx Y
bx Z
bx f
bx X
bx S
bx R
bx t
bx F
bx _
bx q
bx s
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 o
bx 8
bx @
bx 9
bx =
b101100 K
b101100 m
b101100 n
bx (
bx .
bx O
bx ~
b1010 }
b100 {
bx M
bx j
bx l
b101100 J
b101100 e
b101100 h
b101100 k
b101000 '
b101000 -
b101000 N
b101000 b
b101000 c
bx !
bx &
bx ,
bx D
bx \
bx r
bx #"
1$
#90
0$
#95
b110000 L
b110000 a
b110000 p
b110000 K
b110000 m
b110000 n
b1011 }
b110000 J
b110000 e
b110000 h
b110000 k
b101100 '
b101100 -
b101100 N
b101100 b
b101100 c
1$
#100
0$
#105
b110100 L
b110100 a
b110100 p
b110100 K
b110100 m
b110100 n
b1100 }
b110100 J
b110100 e
b110100 h
b110100 k
b110000 '
b110000 -
b110000 N
b110000 b
b110000 c
1$
#110
0$
